syntax = "proto3";
package rusk;
option go_package = "github.com/dusk-protobuf/autogen/go/rusk";

import "transaction.proto";
import "keys.proto";

// Call during block generation
message DistributeTransaction {
  fixed64 total_reward = 1;
  bytes provisioners_addresses = 2;
  PublicKey bg_pk = 3;
  rusk.Transaction tx = 4;
}

// WithdrawFeesTransaction is the transaction for a Provisioner to withdraw the fees using the smart contract
message WithdrawFeesTransaction {
  bytes bls_key = 1;
  bytes sig = 2;
  bytes msg = 3;
  rusk.Transaction tx = 4;
}

// Call from consensus
message SlashTransaction {
  bytes bls_key = 1;
  uint32 step = 2;
  fixed64 round = 3;
  bytes first_msg = 4;
  bytes first_sig = 5;
  bytes second_msg = 6;
  bytes second_sig = 7;
  rusk.Transaction tx = 8;
}

// StakeTransaction is the transaction for the Stake used by the Provisioners to engage in committees
message StakeTransaction {
  bytes bls_key = 1;
  fixed64 value = 2; // Should be the leftover value that was burned in `tx`
  fixed64 expiration_height = 3;
  rusk.Transaction tx = 4;
}

// BidTransaction is the transaction for the Bid used by the Block Generator to create a Score
message BidTransaction {
  bytes m = 1;
  bytes commitment = 2; 
  bytes encrypted_value = 3;
  bytes encrypted_blinder = 4;
  fixed64 expiration_height = 5;
  bytes pk = 6;
  bytes r = 7;
  bytes seed = 8;
  rusk.Transaction tx = 9;
}

// WithdrawBidTransaction is the transaction to withdraw a bid
message WithdrawBidTransaction {
  bytes commitment = 1;
  bytes encrypted_value = 2;
  bytes encrypted_blinder = 3;
  bytes bid = 4;
  bytes sig = 5;
  rusk.Transaction tx = 6;
}

// WithdrawStakeTransaction is the transaction to withdraw a stake
message WithdrawStakeTransaction {
  bytes bls_key = 1;
  bytes sig = 2;
  rusk.Transaction tx = 3;
}
