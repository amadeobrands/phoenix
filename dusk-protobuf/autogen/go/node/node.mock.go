// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "quae",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: false,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction: 0,
					Timestamp: 662,
					Type:      1,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 704,
					Type:      3,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 449,
					Type:      5,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 438,
					Type:      4,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 938,
					Type:      0,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 239,
					Type:      3,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 880,
					Type:      2,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 583,
					Type:      5,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 3,
					Id:   "67e79dcf-5e95-4f36-84d1-5dbc8c8d6fb6",
				},
				&Tx{
					Type: 2,
					Id:   "5c75d022-7342-49fa-a205-5499231bc029",
				},
				&Tx{
					Type: 5,
					Id:   "dd010b3f-b82e-45bf-a23e-5feec2d49d60",
				},
				&Tx{
					Type: 0,
					Id:   "a8a2139a-a0cd-4409-bd9e-58f851039c12",
				},
				&Tx{
					Type: 2,
					Id:   "32acf158-2650-495f-a870-80e643eb93d9",
				},
				&Tx{
					Type: 3,
					Id:   "c0e05502-d909-4c52-8ad0-9e7a1cc38d68",
				},
				&Tx{
					Type: 0,
					Id:   "20b69f3d-cbd6-45d6-865f-86dd4a9e2b59",
				},
				&Tx{
					Type: 2,
					Id:   "2bd576fa-1c0e-4841-9070-08bcd7fee45e",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "deserunt",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 572.7484,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type MaintainerMock struct{}

func (m *MaintainerMock) AutomateConsensusTxs(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "sed",
		}
	return res, nil
}
