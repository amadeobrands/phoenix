// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "aut",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: false,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction: 1,
					Timestamp: 973,
					Type:      0,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 105,
					Type:      2,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 659,
					Type:      1,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 563,
					Type:      2,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 33,
					Type:      0,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 503,
					Type:      3,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 997,
					Type:      3,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 681,
					Type:      5,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 0,
					Id:   "b1f829d7-faa2-4540-b68f-df84a4f25a4c",
				},
				&Tx{
					Type: 0,
					Id:   "147f1323-aa28-494e-a0cd-7fcc11066bbd",
				},
				&Tx{
					Type: 1,
					Id:   "73e0433b-4024-4079-b7a7-d4a3fa7534b7",
				},
				&Tx{
					Type: 1,
					Id:   "8069ee74-17d6-4b71-b54c-4edbf39d2370",
				},
				&Tx{
					Type: 1,
					Id:   "b620ebbe-276a-47f8-8b19-9379e0116e25",
				},
				&Tx{
					Type: 5,
					Id:   "4b56725e-94e8-4b6e-b1ee-b7d160fb7fdd",
				},
				&Tx{
					Type: 5,
					Id:   "82f61aa2-dc6d-4740-86be-a8f26a5c30b6",
				},
				&Tx{
					Type: 2,
					Id:   "75ea4d89-f6f3-4362-950b-52cc099d4cdf",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "exercitationem",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 137.256,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type MaintainerMock struct{}

func (m *MaintainerMock) AutomateConsensusTxs(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "sapiente",
		}
	return res, nil
}
